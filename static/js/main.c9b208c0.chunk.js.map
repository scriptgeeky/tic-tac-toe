{"version":3,"sources":["Square/Square.js","Board/Board.js","Game.js","registerServiceWorker.js","index.js"],"names":["Square","props","val","test","value","className","onClick","Board","handleClick","i","squares","state","slice","calculateWinner","xIsNext","setState","resetBoard","Array","from","keys","renderSquare","emptySquares","origBoard","newBoard","b","length","push","determineBestSquare","player","topScore","topMove","result","availSpots","humanPlayer","score","aiPlayer","moves","move","index","componentDidUpdate","render","status","winner","React","Component","lines","a","c","plays","won","entries","every","elem","indexOf","Game","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c9b208c0.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Square(props) {\n  let val = !/\\d/.test(props.value) ? props.value : null;\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {val}\n    </button>\n  );\n}\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"../Square/Square\";\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array.from(Array(9).keys()),\n      xIsNext: true,\n      humanPlayer: \"X\",\n      aiPlayer: \"O\"\n    };\n  }\n\n  // Click handler to kick off the chain of events\n  handleClick = i => {\n    const squares = this.state.squares.slice();\n    if (\n      calculateWinner(this.state.squares, null) ||\n      typeof squares[i] !== \"number\"\n    ) {\n      // if there's a winner of we've ran out of empty spots the game is over\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext // Now it's the computer's turn\n    });\n  };\n\n  // Let's restart game\n  resetBoard = () => {\n    this.setState({\n      squares: Array.from(Array(9).keys()),\n      xIsNext: true\n    });\n  };\n\n  // Assign a click event listener and bind it\n  renderSquare = i => {\n    return (\n      <Square\n        value={this.state.squares[i]}\n        onClick={() => this.handleClick(i)}\n      />\n    );\n  };\n\n  // Just need a list of tempty squares\n  emptySquares = origBoard => {\n    let newBoard = []; // let's create a a new array to track empty spots\n    for (let b = 0; b < origBoard.length; b++) {\n      if (typeof origBoard[b] === \"number\") {\n        newBoard.push(b); // let's use a number to determine if it's an empty one\n      }\n    }\n    return newBoard;\n  };\n\n  determineBestSquare = (newBoard, player) => {\n    let availSpots = this.emptySquares(newBoard); // find available empty using the existing board\n    let topScore; // we'll use this to track the highest possible score\n    let topMove; // we'll use this to determine the top move\n    let result;\n\n    if (calculateWinner(newBoard, this.state.humanPlayer)) {\n      return { score: -10 }; // if O wins we return -10\n    } else if (calculateWinner(newBoard, this.state.aiPlayer)) {\n      return { score: 10 }; // if X wins we return 10\n    } else if (availSpots.length === 0) {\n      return { score: 0 }; //tie, we return 0\n    }\n\n    let moves = []; // we'll need to track the scores for later evaluation\n\n    for (let i = 0; i < availSpots.length; i++) {\n      let move = {};\n\n      move.index = newBoard[availSpots[i]]; // set the index number of the empty spot\n      newBoard[availSpots[i]] = player; // set an empty spot on newBoard to the current player\n\n      if (player === this.state.aiPlayer) {\n        result = this.determineBestSquare(newBoard, this.state.humanPlayer);\n        move.score = result.score; // just need the score for tracking\n      } else {\n        result = this.determineBestSquare(newBoard, this.state.aiPlayer);\n        move.score = result.score; // just need the score for tracking\n      }\n      newBoard[availSpots[i]] = move.index; // let's reset the new board to what it was before\n      moves.push(move);\n    }\n\n    if (player === this.state.aiPlayer) {\n      topScore = -10000; // we choose the lowest score when the machine is playing\n      for (let i = 0; i < moves.length; i++) {\n        // let's loop through the moves\n        if (moves[i].score > topScore) {\n          topScore = moves[i].score; // higher score than the bestScore move gets stored\n          topMove = i; // even if we have moves with similar scores, only the first one is stored\n        }\n      }\n    } else {\n      topScore = 10000;\n      for (let i = 0; i < moves.length; i++) {\n        if (moves[i].score < topScore) {\n          // We're looking for the smallest score to store\n          topScore = moves[i].score;\n          topMove = i;\n        }\n      }\n    }\n    return moves[topMove];\n  };\n\n  // We want to run this after every render\n  componentDidUpdate = () => {\n    if (!this.state.xIsNext) {\n      // But only if the computer's turn is up\n      this.handleClick(\n        this.determineBestSquare(this.state.squares, this.state.aiPlayer).index\n      );\n    }\n  };\n\n  render = () => {\n    const winner = calculateWinner(this.state.squares, null);\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    }\n\n    return (\n      <div>\n        <h1>Tic Tac Toe</h1>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n        <button onClick={() => this.resetBoard()}>Reset game?</button>\n      </div>\n    );\n  };\n}\n\nexport default Board;\n\nfunction calculateWinner(squares, player) {\n  // List of all winning combinations\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [6, 4, 2]\n  ];\n  if (player !== null) {\n    // Track/attribute wins to a player\n    let plays = [];\n    let won = null;\n\n    // Let's determine which of the plays belong to the player\n    // NOTE: tried using reduce here with IIFE but it caused an out of limits error\n    // replaced with for loop which is less performant on larger datasets but should be fine here\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i] === player) plays.push(i);\n    }\n\n    for (let [index, win] of lines.entries()) {\n      // Let's check to see if the player won\n      if (win.every(elem => plays.indexOf(elem) > -1)) {\n        // has the player played in every spot that matters\n        won = { index: index, player: player }; // let's track the which combo was won and who won it\n        break;\n      }\n    }\n    return won;\n  } else {\n    // This one is only get a boolean answer if the game is won\n    for (let i = 0; i < lines.length; i++) {\n      let [a, b, c] = lines[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n}\n","import React from \"react\";\nimport Board from \"./Board/Board\";\nimport \"./Game.css\";\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./Game\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}